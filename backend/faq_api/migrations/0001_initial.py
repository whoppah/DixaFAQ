# Generated by Django 4.2.23 on 2025-06-17 11:56

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ClusterRun",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("notes", models.TextField(blank=True, null=True)),
                ("cluster_map", models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="FAQ",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question", models.TextField()),
                ("answer", models.TextField()),
                (
                    "embedding",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(), blank=True, null=True, size=None
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message_id", models.CharField(max_length=100, unique=True)),
                ("text", models.TextField()),
                (
                    "author_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "author_email",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
                ("channel", models.CharField(blank=True, max_length=50, null=True)),
                ("direction", models.CharField(blank=True, max_length=50, null=True)),
                ("csid", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, null=True)),
                (
                    "from_phone_number",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "to_phone_number",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("duration", models.IntegerField(blank=True, null=True)),
                (
                    "to",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("from_field", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "cc",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "bcc",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("is_automated_message", models.BooleanField(blank=True, null=True)),
                ("voicemail_url", models.URLField(blank=True, null=True)),
                ("recording_url", models.URLField(blank=True, null=True)),
                ("attached_files", models.JSONField(blank=True, null=True)),
                ("chat_input_question", models.TextField(blank=True, null=True)),
                ("chat_input_answer", models.TextField(blank=True, null=True)),
                ("chat_menu_text", models.TextField(blank=True, null=True)),
                ("form_submission", models.JSONField(blank=True, null=True)),
                (
                    "embedding",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(), blank=True, null=True, size=None
                    ),
                ),
                ("sentiment", models.CharField(blank=True, max_length=20, null=True)),
                ("gpt_score", models.IntegerField(blank=True, null=True)),
                ("gpt_label", models.CharField(blank=True, max_length=50, null=True)),
                ("gpt_reason", models.TextField(blank=True, null=True)),
                (
                    "matched_faq",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="matched_messages",
                        to="faq_api.faq",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ClusterResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cluster_id", models.IntegerField()),
                ("message_count", models.IntegerField()),
                ("top_message", models.TextField()),
                ("similarity", models.FloatField()),
                ("gpt_evaluation", models.TextField()),
                ("sentiment", models.CharField(max_length=20)),
                ("keywords", models.JSONField()),
                ("summary", models.TextField()),
                ("created_at", models.DateTimeField()),
                ("coverage", models.CharField(max_length=20)),
                ("resolution_score", models.IntegerField()),
                ("resolution_reason", models.TextField()),
                ("faq_suggestion", models.JSONField(blank=True, null=True)),
                ("topic_label", models.CharField(max_length=100)),
                (
                    "matched_faq",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="matched_clusters",
                        to="faq_api.faq",
                    ),
                ),
                (
                    "run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="clusters",
                        to="faq_api.clusterrun",
                    ),
                ),
            ],
            options={
                "unique_together": {("run", "cluster_id")},
            },
        ),
    ]
